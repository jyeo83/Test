// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.DOM;

namespace Test.DOM.Migrations
{
    [DbContext(typeof(TestContext))]
    [Migration("20200812210915_addUser")]
    partial class addUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Test.DOM.Models.AssistantDailyReport", b =>
                {
                    b.Property<int>("AssistantDailyReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narrative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("AssistantDailyReportId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AssistantDailyReports");
                });

            modelBuilder.Entity("Test.DOM.Models.Contractor", b =>
                {
                    b.Property<int>("ContractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractorId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("Test.DOM.Models.Labor", b =>
                {
                    b.Property<int>("LaborId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TradeId")
                        .HasColumnType("int");

                    b.HasKey("LaborId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("TradeId");

                    b.ToTable("Labors");
                });

            modelBuilder.Entity("Test.DOM.Models.LaborWorkPerformed", b =>
                {
                    b.Property<int>("WorkPerformedId")
                        .HasColumnType("int");

                    b.Property<int>("LaborId")
                        .HasColumnType("int");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.Property<decimal>("OtHours")
                        .HasColumnType("decimal(3,1)");

                    b.Property<decimal>("RegHours")
                        .HasColumnType("decimal(3,1)");

                    b.HasKey("WorkPerformedId", "LaborId", "TradeId");

                    b.HasIndex("LaborId");

                    b.HasIndex("TradeId");

                    b.ToTable("LaborWorkPerformed");
                });

            modelBuilder.Entity("Test.DOM.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("District")
                        .HasColumnType("int");

                    b.Property<string>("EA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Test.DOM.Models.ProjectContractor", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ContractorId");

                    b.HasIndex("ContractorId");

                    b.ToTable("ProjectContractors");
                });

            modelBuilder.Entity("Test.DOM.Models.ProjectLabor", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("LaborId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "LaborId");

                    b.HasIndex("LaborId");

                    b.ToTable("ProjectLabors");
                });

            modelBuilder.Entity("Test.DOM.Models.Trade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TradeId");

                    b.ToTable("Trade");
                });

            modelBuilder.Entity("Test.DOM.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Test.DOM.Models.WorkPerformed", b =>
                {
                    b.Property<int>("WorkPerformedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssistantDailyReportId")
                        .HasColumnType("int");

                    b.HasKey("WorkPerformedId");

                    b.HasIndex("AssistantDailyReportId");

                    b.ToTable("WorkPerformed");
                });

            modelBuilder.Entity("Test.DOM.Models.AssistantDailyReport", b =>
                {
                    b.HasOne("Test.DOM.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.DOM.Models.Labor", b =>
                {
                    b.HasOne("Test.DOM.Models.Contractor", "Contractor")
                        .WithMany("Labors")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.DOM.Models.Trade", "Trade")
                        .WithMany()
                        .HasForeignKey("TradeId");
                });

            modelBuilder.Entity("Test.DOM.Models.LaborWorkPerformed", b =>
                {
                    b.HasOne("Test.DOM.Models.Labor", "Labor")
                        .WithMany("LaborWorkPerformed")
                        .HasForeignKey("LaborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.DOM.Models.Trade", "Trade")
                        .WithMany("LaborWorkPerformed")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.DOM.Models.WorkPerformed", "WorkPerformed")
                        .WithMany("LaborWorkPerformed")
                        .HasForeignKey("WorkPerformedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.DOM.Models.ProjectContractor", b =>
                {
                    b.HasOne("Test.DOM.Models.Contractor", "Contractor")
                        .WithMany("Projects")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.DOM.Models.Project", "Project")
                        .WithMany("Contractors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.DOM.Models.ProjectLabor", b =>
                {
                    b.HasOne("Test.DOM.Models.Labor", "Labor")
                        .WithMany("ProjectsWorked")
                        .HasForeignKey("LaborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.DOM.Models.Project", "Project")
                        .WithMany("Labors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.DOM.Models.WorkPerformed", b =>
                {
                    b.HasOne("Test.DOM.Models.AssistantDailyReport", null)
                        .WithMany("WorkPerformed")
                        .HasForeignKey("AssistantDailyReportId");
                });
#pragma warning restore 612, 618
        }
    }
}
